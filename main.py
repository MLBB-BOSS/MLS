# main.py

import logging
import os
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters
)
from handlers.states import States
from handlers.main_menu import main_menu_handler, unknown_command
from handlers.characters import (
    handle_selecting_hero_class,
    handle_selecting_hero,
    handle_hero_functions_menu
)
from handlers.profile import profile_handler, profile_menu_handler
from handlers.start_handler import start
from utils.data_loader import load_all_heroes, load_heroes_data
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main():
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å TELEGRAM_BOT_TOKEN —è–∫ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    if not OPENAI_API_KEY:
        logger.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å OPENAI_API_KEY —è–∫ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥–µ—Ä–æ—ó–≤
    heroes_by_class = load_all_heroes()
    heroes_data = load_heroes_data()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    application.add_handler(CommandHandler('start', start))

    # –î–æ–¥–∞—î–º–æ ConversationHandler –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            States.MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)
            ],
            States.SELECTING_HERO_CLASS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_selecting_hero_class)
            ],
            States.SELECTING_HERO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_selecting_hero)
            ],
            States.HERO_FUNCTIONS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hero_functions_menu)
            ],
            States.PROFILE_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_menu_handler)
            ],
            # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Å—Ç–∞–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
        },
        fallbacks=[
            CommandHandler('start', start),
            MessageHandler(filters.COMMAND, unknown_command)  # –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
        ]
    )
    application.add_handler(conv_handler)

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—Ä–∏–≥–µ—Ä–Ω–∏—Ö —Å–ª—ñ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trigger_words))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ –≤ bot_data
    application.bot_data['heroes_by_class'] = heroes_by_class
    application.bot_data['heroes_data'] = heroes_data

    logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await application.run_polling()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–∏–≥–µ—Ä–Ω–∏—Ö —Å–ª—ñ–≤ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
async def handle_trigger_words(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text.lower()

    TRIGGER_WORDS = ["–≥–µ—Ä–æ–π", "–ø–µ—Ä—Å–æ–Ω–∞–∂", "–≥–µ–π–º–ø–ª–µ–π", "mlbb", "mobile legends"]  # –ü—Ä–∏–∫–ª–∞–¥ —Ç—Ä–∏–≥–µ—Ä–Ω–∏—Ö —Å–ª—ñ–≤

    if any(trigger in message_text for trigger in TRIGGER_WORDS):
        # –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è
        heroes_data = context.bot_data.get('heroes_data', {})
        if not heroes_data:
            await update.message.reply_text("‚ö†Ô∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥–µ—Ä–æ—ó–≤ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        hero_name = random.choice(list(heroes_data.keys()))
        gpt_response = await handle_gpt_query(hero_name, context)
        await update.message.reply_text(gpt_response, parse_mode='HTML', disable_web_page_preview=True)

if __name__ == '__main__':
    asyncio.run(main())
    
