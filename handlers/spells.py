# handlers/search.py
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from handlers import States
from utils.data_loader import load_json_data
import logging

logger = logging.getLogger(__name__)

async def handle_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    user_id = update.effective_user.id
    context.bot_data['last_message_time'][user_id] = context.application.loop.time()
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ü–æ—à—É–∫—É: {user_input}")
    
    if user_input == "üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤":
        await perform_search(update, context)
        return States.SEARCH_PERFORMING
    elif user_input == "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫":
        await perform_voice_search(update, context)
        return States.NEWS_MENU
    elif user_input == "üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É":
        await show_search_history(update, context)
        return States.NEWS_MENU
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.NEWS_MENU

async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîç –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É:")
    return States.SEARCH_PERFORMING

async def perform_voice_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫ –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
    return States.NEWS_MENU

async def show_search_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    history = context.user_data.get('search_history', [])
    if history:
        history_text = "üìù **–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É:**\n\n" + "\n".join([f"{idx+1}. {query}" for idx, query in enumerate(history)])
    else:
        history_text = "üìù **–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É –ø–æ—Ä–æ–∂–Ω—è.**"
    await update.message.reply_text(history_text, parse_mode='Markdown')
    return States.NEWS_MENU

async def handle_search_performing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.message.text.strip()
    if query:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç —É —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—à—É–∫—É
        if 'search_history' not in context.user_data:
            context.user_data['search_history'] = []
        context.user_data['search_history'].append(query)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤
        matching_heroes = [
            hero["name"] for hero in load_json_data('data/characters.json').get('heroes', [])
            if query.lower() in hero["name"].lower()
        ]
        
        if matching_heroes:
            buttons = []
            for i in range(0, len(matching_heroes), 4):
                row = matching_heroes[i:i + 4]
                buttons.append([KeyboardButton(hero) for hero in row])
            buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
            await update.message.reply_text(f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':**", parse_mode='Markdown', reply_markup=reply_markup)
            return States.SEARCH_HERO_GUIDES
        else:
            await update.message.reply_text(f"üîç –ù–µ–º–∞—î –≥–µ—Ä–æ—ó–≤ –∞–±–æ –≥–∞–π–¥—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å '{query}'.")
            await start(update, context)
            return States.MAIN_MENU
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É.")
        return States.SEARCH_PERFORMING

async def handle_search_hero_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_hero = update.message.text.strip()
    heroes = load_json_data('data/characters.json').get('heroes', [])
    hero_info = next((hero for hero in heroes if hero['name'] == selected_hero), None)
    if hero_info:
        hero_details = (
            f"üìñ **–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –≥–µ—Ä–æ—è {selected_hero}:**\n\n"
            f"<b>–ö–ª–∞—Å:</b> {hero_info.get('class', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"<b>–†–æ–ª—å:</b> {hero_info.get('role', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"<b>HP:</b> {hero_info.get('hp', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"<b>–ê—Ç–∞–∫–∞:</b> {hero_info.get('attack', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"<b>–ó–∞—Ö–∏—Å—Ç:</b> {hero_info.get('defense', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
            f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {hero_info.get('details_link', '–ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è')}"
        )
        await update.message.reply_text(hero_details, parse_mode='HTML', disable_web_page_preview=True)
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—à—É–∫—É
        buttons = [
            [KeyboardButton("üîç –ü–æ—à—É–∫ –≥–µ—Ä–æ—ó–≤ —Ç–∞ –≥–∞–π–¥—ñ–≤"), KeyboardButton("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π –ø–æ—à—É–∫")],
            [KeyboardButton("üìù –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—É"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("üîç –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.NEWS_MENU
    elif selected_hero == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±—Ä–∞–Ω–∞ –æ–ø—Ü—ñ—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –≥–µ—Ä–æ—é.")
        await start(update, context)
        return States.MAIN_MENU
