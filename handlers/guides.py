# handlers/guides.py

import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from handlers.states import States
from handlers.start_handler import start

logger = logging.getLogger(__name__)

async def guides_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    user_id = update.effective_user.id
    current_time = context.application.loop.time()
    context.bot_data.setdefault('last_message_time', {})[user_id] = current_time
    logger.info(f"–í–∏–±—ñ—Ä –≤ –ì–∞–π–¥–∞—Ö: {user_input}")

    if user_input == "üìù –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É":
        await send_class_strategies(update, context)
        return States.GUIDES
    elif user_input == "üí° –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await send_interactive_recommendations(update, context)
        return States.GUIDES
    elif user_input == "üé• –í—ñ–¥–µ–æ-–≥–∞–π–¥–∏":
        await send_video_guides(update, context)
        return States.GUIDES
    elif user_input == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
        return States.MAIN_MENU
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç.")
        return States.GUIDES

async def send_class_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    strategies = (
        "üìù **–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É:**\n\n"
        "<b>–¢–∞–Ω–∫–∏:</b> –§–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –∑–∞—Ö–∏—Å—Ç—ñ —Ç–∞ —ñ–Ω—ñ—Ü—ñ—é–≤–∞–Ω–Ω—ñ –±–æ—ó–≤.\n"
        "<b>–ë—ñ–π—Ü—ñ:</b> –ê—Ç–∞–∫—É–π—Ç–µ –≤–æ—Ä–æ–≥—ñ–≤ —Ç–∞ —É—Ç—Ä–∏–º—É–π—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó.\n"
        "<b>–ú–∞–≥–∏:</b> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∏—Å–æ–∫–∏–π —É—Ä–æ–Ω —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å.\n"
        "<b>–°—Ç—Ä—ñ–ª—å—Ü—ñ:</b> –ó–∞–±–µ–∑–ø–µ—á—É–π—Ç–µ –ø–æ—Å—Ç—ñ–π–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó.\n"
        "<b>–ê—Å–∞—Å–∏–Ω–∏:</b> –ó–∞–≤–¥–∞–≤–∞–π—Ç–µ —à–≤–∏–¥–∫–∏–π —É—Ä–æ–Ω —Ç–∞ –∑–Ω–∏–∫–∞–π—Ç–µ.\n"
        "<b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> –î–æ–ø–æ–º–∞–≥–∞–π—Ç–µ —Å–æ—é–∑–Ω–∏–∫–∞–º —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ –ø–æ–ª–µ –±–æ—é.\n\n"
        "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/class-strategies"
    )
    await update.message.reply_text(strategies, parse_mode='HTML', disable_web_page_preview=True)

async def send_interactive_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    classes = ["–¢–∞–Ω–∫", "–ë–æ—Ä–µ—Ü—å", "–ú–∞–≥", "–°—Ç—Ä—ñ–ª–µ—Ü—å", "–ê—Å–∞—Å–∏–Ω", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"]
    buttons = []
    for i in range(0, len(classes), 3):
        row = classes[i:i + 3]
        buttons.append([KeyboardButton(cls) for cls in row])
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "üí° **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≥–∞–π–¥—ñ–≤:**",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return States.GUIDES

async def send_video_guides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    video_guides = (
        "üé• **–í—ñ–¥–µ–æ-–≥–∞–π–¥–∏:**\n\n"
        "‚Ä¢ [–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤](https://youtube.com/guide1)\n"
        "‚Ä¢ [–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –≥—Ä–∏](https://youtube.com/guide2)\n"
        "‚Ä¢ [–ü–æ—Ä–∞–¥–∏ –≤—ñ–¥ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª—ñ–≤](https://youtube.com/guide3)\n\n"
        "üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://example.com/video-guides"
    )
    await update.message.reply_text(video_guides, parse_mode='Markdown', disable_web_page_preview=True)
