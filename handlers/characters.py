# handlers/characters.py

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from handlers.states import States
import logging
import os
import openai
from utils.data_loader import load_heroes_data

logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI API
openai.api_key = os.getenv("OPENAI_API_KEY")

def get_hero_classes_keyboard(context):
    heroes_by_class = context.bot_data.get('heroes_by_class', {})
    buttons = []
    row = []
    for idx, class_name in enumerate(heroes_by_class.keys(), 1):
        row.append(KeyboardButton(class_name))
        if idx % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_heroes_keyboard(context):
    selected_class = context.user_data.get('selected_class')
    heroes = context.bot_data.get('heroes_by_class', {}).get(selected_class, [])
    buttons = []
    row = []
    for idx, hero_name in enumerate(heroes, 1):
        row.append(KeyboardButton(hero_name))
        if idx % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def handle_selecting_hero_class(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    selected_class = update.message.text.strip()
    heroes_by_class = context.bot_data.get('heroes_by_class', {})

    if selected_class == "üîô –ù–∞–∑–∞–¥":
        from handlers.main_menu import get_main_menu_keyboard
        reply_markup = get_main_menu_keyboard()
        await update.message.reply_text("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=reply_markup)
        return States.MAIN_MENU

    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º, –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤
    if selected_class not in heroes_by_class:
        reply_markup = get_hero_classes_keyboard(context)
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≥–µ—Ä–æ—è –∑ –º–µ–Ω—é:", reply_markup=reply_markup)
        return States.SELECTING_HERO_CLASS

    context.user_data['selected_class'] = selected_class
    heroes = heroes_by_class[selected_class]

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–µ—Ä–æ—ó–≤
    logger.info(f"Heroes in class {selected_class}: {heroes}")

    if not heroes:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤ —É –∫–ª–∞—Å—ñ {selected_class}.")
        return States.SELECTING_HERO_CLASS

    reply_markup = get_heroes_keyboard(context)
    await update.message.reply_text(f"–í–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É {selected_class}:", reply_markup=reply_markup)
    return States.SELECTING_HERO

async def handle_selecting_hero(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        hero_name = update.message.text.strip()
        if hero_name == "üîô –ù–∞–∑–∞–¥":
            reply_markup = get_hero_classes_keyboard(context)
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≥–µ—Ä–æ—è:", reply_markup=reply_markup)
            return States.SELECTING_HERO_CLASS

        selected_class = context.user_data.get('selected_class')
        heroes = context.bot_data.get('heroes_by_class', {}).get(selected_class, [])

        if hero_name not in heroes:
            await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –º–µ–Ω—é.")
            return States.SELECTING_HERO

        context.user_data['selected_hero'] = hero_name

        buttons = [
            [KeyboardButton("‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"), KeyboardButton("üõ†Ô∏è –ü–æ–±—É–¥–æ–≤–∏")],
            [KeyboardButton("üìñ –ì–∞–π–¥–∏"), KeyboardButton("üó∫Ô∏è –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó")],
            [KeyboardButton("üéØ –ö–æ–Ω—Ç—Ä-–ü—ñ–∫–∏"), KeyboardButton("‚öîÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text(f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {hero_name}. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
        return States.HERO_FUNCTIONS_MENU
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_selecting_hero: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return States.SELECTING_HERO

async def handle_hero_functions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_input = update.message.text.strip()
        hero_name = context.user_data.get('selected_hero')
        hero_class = context.user_data.get('selected_class')

        if user_input == "üîô –ù–∞–∑–∞–¥":
            reply_markup = get_heroes_keyboard(context)
            await update.message.reply_text(f"–í–∏–±–µ—Ä—ñ—Ç—å –≥–µ—Ä–æ—è –∑ –∫–ª–∞—Å—É {hero_class}:", reply_markup=reply_markup)
            return States.SELECTING_HERO

        if user_input == "‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            hero_info = await get_hero_info(hero_name, context)
            if hero_info:
                await update.message.reply_text(hero_info, parse_mode='HTML', disable_web_page_preview=True)
            else:
                await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è.")
        else:
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É
            await update.message.reply_text(f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ '{user_input}' –¥–ª—è –≥–µ—Ä–æ—è {hero_name}. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.")

        return States.HERO_FUNCTIONS_MENU
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_hero_functions_menu: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return States.HERO_FUNCTIONS_MENU

async def get_hero_info(hero_name: str, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è —á–µ—Ä–µ–∑ OpenAI API."""
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—è
        heroes_data = context.bot_data.get('heroes_data', {})
        hero_info = heroes_data.get(hero_name)

        if not hero_info:
            return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—å–æ–≥–æ –≥–µ—Ä–æ—è."

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞—Å—É –≥–µ—Ä–æ—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
        hero_class = hero_info.get('class', 'Unknown')

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
        system_prompt = """
–¢–∏ ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π —ñ –¥—Ä—É–∂–Ω—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–µ—Ä–æ—ó–≤ –≥—Ä–∏ Mobile Legends: Bang Bang. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–¥–∞–Ω—É –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥–µ—Ä–æ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É.
        """

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        base_info = f"""
–Ü–º'—è –≥–µ—Ä–æ—è: {hero_info.get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}
–ö–ª–∞—Å: {hero_info.get('class', 'N/A')}
–†–æ–ª—å: {hero_info.get('role', 'N/A')}
–®–≤–∏–¥–∫—ñ—Å—Ç—å: {hero_info.get('speed', 'N/A')}
–ó–¥–æ—Ä–æ–≤'—è (HP): {hero_info.get('hp', 'N/A')}
–ú–∞–Ω–∞ (MP): {hero_info.get('mp', 'N/A')}
–§—ñ–∑–∏—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç: {hero_info.get('physical_defense', 'N/A')}
–ú–∞–≥—ñ—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç: {hero_info.get('magical_defense', 'N/A')}
–®–≤–∏–¥–∫—ñ—Å—Ç—å –∞—Ç–∞–∫–∏: {hero_info.get('attack_speed', 'N/A')}

–ù–∞–≤–∏—á–∫–∏:
"""
        skills = hero_info.get('skills', {})
        for skill_type in ['passive', 'skill1', 'skill2', 'ultimate']:
            skill = skills.get(skill_type)
            if skill:
                info = f"{skill_type.capitalize()}: {skill.get('name', 'N/A')}\n–û–ø–∏—Å: {skill.get('description', 'N/A')}\n–ß–∞—Å –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏: {skill.get('cooldown', 'N/A')}\n–í–∏—Ç—Ä–∞—Ç–∏ –º–∞–Ω–∏: {skill.get('mana_cost', 'N/A')}\n\n"
                base_info += info

        strategies = hero_info.get('strategies', {})
        recommendations = hero_info.get('recommendations', {})
        drafts = hero_info.get('drafts', {})

        base_info += f"""
–°—Ç—Ä–∞—Ç–µ–≥—ñ—ó:
‚Ä¢ –ê–≥—Ä–µ—Å–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategies.get('aggressive', 'N/A')}
‚Ä¢ –ó–∞—Ö–∏—Å–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategies.get('defensive', 'N/A')}
‚Ä¢ –ú—ñ–∫—Ä–æ–≥—Ä–∞: {strategies.get('micro', 'N/A')}

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≥—Ä–∏:
‚Ä¢ –†–∞–Ω–Ω—ñ–π –µ—Ç–∞–ø: {recommendations.get('early_game', 'N/A')}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –µ—Ç–∞–ø: {recommendations.get('mid_game', 'N/A')}
‚Ä¢ –ü—ñ–∑–Ω—è –≥—Ä–∞: {recommendations.get('late_game', 'N/A')}

–î—Ä–∞—Ñ—Ç–∏:
‚Ä¢ –Ü–¥–µ–∞–ª—å–Ω—ñ —Å–æ—é–∑–Ω–∏–∫–∏: {drafts.get('ideal_allies', 'N/A')}
‚Ä¢ –ö–æ–≥–æ –∫—Ä–∞—â–µ —É–Ω–∏–∫–∞—Ç–∏: {drafts.get('avoid_enemies', 'N/A')}
‚Ä¢ –°–∏–ª—å–Ω—ñ –¥—Ä–∞—Ñ—Ç–∏: {drafts.get('strong_drafts', 'N/A')}
        """

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
        user_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –≥–µ—Ä–æ—è Mobile Legends: Bang Bang. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–∞ –≥—Ä–∏.

{base_info}
        """

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–µ—à–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        cache = context.bot_data.get('ai_responses', {})
        cache_key = f"{hero_name}_{hero_class}"
        if cache_key in cache:
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ –∫–µ—à—É –¥–ª—è {hero_name} ({hero_class})")
            return cache[cache_key]

        # –í–∏–∫–ª–∏–∫ OpenAI API
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPT-3.5-turbo
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1500,
            temperature=0.7,
        )

        ai_text = response.choices[0].message['content'].strip()

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Telegram
        formatted_text = format_ai_response(ai_text)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        cache[cache_key] = formatted_text
        context.bot_data['ai_responses'] = cache

        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ –¥–ª—è –≥–µ—Ä–æ—è: {hero_name}")

        return formatted_text

def format_ai_response(ai_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    # –ó–∞–º—ñ–Ω—é—î–º–æ —Å–∏–º–≤–æ–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –Ω–∞ <br> –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    formatted_text = ai_text.replace('\n', '<br>')
    return formatted_text
        
